# github actions configuration file.
# Stanislav Sotnikov (ssotnikov@ccny.cuny.edu)

on:
  pull_request:
    branches: [master, release/*]

jobs:
  format-check:
    # Checks formatting with black.
    name: format-check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install pipenv.
        run: |
          python -m pip install --upgrade pipenv

      - id: cache-pipenv
        uses: actions/cache@v2
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv sync --dev

      - name: Run black
        run: |
          pipenv run black -l 80 --check tests/ ascii_docs_t1/

      - name: Run isort
        run: |
          pipenv run isort --check tests/ ascii_docs_t1/

  mypy-check:
    name: mypy-check
    # Check proper type annotations with mypy.
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install pipenv.
        run: |
          python -m pip install --upgrade pipenv

      - id: cache-pipenv
        uses: actions/cache@v2
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv sync --dev

      - name: Run mypy
        run: |
          pipenv run mypy tests/ ascii_docs_t1

  tests:
    name: tests
    # Run unittests and update coverage.
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [mypy-check, format-check]
    permissions:
      statuses: write
      checks: write
    steps:
#      - name: Set commit status as pending
#        run: |
#          curl --request POST \
#          --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
#          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
#          --data '{
#            "state": "pending",
#            "description": "Running Tests",
#            "context": "coverage"
#          }' \
#          --fail
      - name: Checkout repository code
        uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install pipenv.
        run: |
          python -m pip install --upgrade pipenv

      - id: cache-pipenv
        uses: actions/cache@v2
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv sync --dev

      - name: Run pytest
        run: |
          pipenv run pytest --cov=ascii_docs_t1/ tests/ > cov.txt
          total=$(cat cov.txt | grep TOTAL | grep -o -E [0-9]+%$)
          echo "Coverage: ${total}"

      - name: Coverage commit status
        # Use github commit status api to upload coverage report.
        run: |
          total=$(cat cov.txt | grep TOTAL | grep -o -E [0-9]+%$)
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --data '{
            "state": "success",
            "description": "'${total}'",
            "context": "coverage"
          }' \
          --fail
      - name: Coverage check in PR
        # Use github checks api to upload coverage to PR checks.
        run: |
          total=$(cat cov.txt | grep TOTAL | grep -o -E [0-9]+%$)
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/check-runs \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'Accept: application/vnd.github.v3+json' \
          --data '{
            "name": "coverage",
            "head_sha": "${{ github.sha }}",
            "conclusion": "neutral",
            "output": {
              "title": "Coverage",
              "summary": "'${total}'"
            }
          }'
